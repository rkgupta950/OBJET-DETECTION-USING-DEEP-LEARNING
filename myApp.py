from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, pyqtSlot
from mainwindow import Ui_MainWindow
import sys
from model import Model
import os
import module

class MainWindowUIClass( Ui_MainWindow ):
    def __init__( self ):
        '''
        QtGui.QDialog.__init__(self, parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.ui.lineEdit.setText("safa")
        print(self.ui.lineEdit.text())
        '''

        '''Initialize the super class
        '''
        super().__init__()
        self.model = Model()
        
    def setupUi( self, MW ):
        ''' Setup the UI of the super class, and add here code
        that relates to the way we want our UI to operate.
        '''
        super().setupUi( MW )

        # close the lower part of the splitter to hide the 
        # debug window under normal operations
        #self.splitter.setSizes([300, 0])

    def debugPrint( self, msg ):
        '''Print the message in the text edit at the bottom of the
        horizontal splitter.
        '''
        self.debugTextBrowser.append( msg )

    def refreshAll( self ):
        
        self.lineEdit.setText( self.model.getFileName() )
        self.textEdit.setText( self.model.getFileContents() )
    
    # slot
    def returntextSlot( self ):
        print("returncar_up")
        
    def returncar_down( self ):
        print("returncar_down")
        
    def returncar_count( self ):
        #print("returncar_count")
        #print("word",word)
        pass
        #folderName =  self.lineEdit.text()
        #pathname= self.label_2.setText( text )
        #print("path",self.label_2.text())
        return
    def returnedPressedSlot( self ):
        ''' Called when the user enters a string in the line edit and
        presses the ENTER key.
        '''
        #self.button.clicked.connect(self.on_click)
        #self.show()
        
        #QtGui.QDialog.__init__(self, parent)
        #self.ui = Ui_MainWindow()
        #self.Ui_MainWindow.setupUi(self)
        #self.Ui_MainWindow.setupUi.lineEdit.setText("safa")
        #print(self.Ui_MainWindow.setupUi.lineEdit.text())
        #folderName = self.lineEdit.QtWidgets.QLineEdit("welcome")
        #self.lineEdit = QtWidgets.QLineEdit("welcome")
        #self.lineEdit.setObjectName("lineEdit")
        #print("self.lineedit",self.lineEdit.text())

        folderName =  self.lineEdit.text()
        #print("textbox",folderName)
        
        if self.model.isValid( folderName ):
            pass
            #self.model.setFileName( self.lineEdit.text() )
            #self.refreshAll()
        else:
            m = QtWidgets.QMessageBox()
            m.setText("Folder contains no .avi file!\n" + folderName )
            m.setIcon(QtWidgets.QMessageBox.Warning)
            m.setStandardButtons(QtWidgets.QMessageBox.Ok
                                 | QtWidgets.QMessageBox.Cancel)
            m.setDefaultButton(QtWidgets.QMessageBox.Cancel)
            ret = m.exec_()
            self.lineEdit.setText( "" )
            #self.refreshAll()
            #self.debugPrint( "Invalid file specified: " + fileName  )
        #linename =  self.lineEdit.setText( folderName )
        #print("linename",linename)
        return 
    # slot
    def submitSlot( self ):
        ''' Called when the user presses the Write-Doc button.
        '''
        print("Please wait a moment")
        folderName =  self.lineEdit.text()
        
        #print("Returned")
        data=module.foldername(folderName)
        self.label_2.setText( data )
        #self.label_3.setText("Down count:")
        #self.label_4.setText("Total car count:")
        print("Completed.....!!") 
        
    # slot
    def browseSlot( self ):
        ''' Called when the user presses the Browse button
        '''
        
        #print("Browsefolder")
        #folderPath = QtWidgets.QFileDialog.getExistingDirectory(0, 'Select folder');
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        
        folderName = QtWidgets.QFileDialog.getOpenFileName(None,
                        "QFileDialog.getOpenFileName()",
                        "",
                        "All Files (*)",
                        options=options)
       
        print(folderName[0])
        self.lineEdit.setText( folderName[0] )
                
def main():
    """
    This is the MAIN ENTRY POINT of our application.  The code at the end
    of the mainwindow.py script will not be executed, since this script is now
    our main program.   We have simply copied the code from mainwindow.py here
    since it was automatically generated by '''pyuic5'''.
    """
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = MainWindowUIClass()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

main()